//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace mvcalligator
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class HotelManagmentEntities1 : DbContext
    {
        public HotelManagmentEntities1()
            : base("name=HotelManagmentEntities1")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<ChckIn> ChckIns { get; set; }
        public virtual DbSet<ChckOut> ChckOuts { get; set; }
        public virtual DbSet<Room> Rooms { get; set; }
        public virtual DbSet<User> Users { get; set; }
    
        public virtual int spInsertData(Nullable<int> roomNo, string guestName, string checkinDate, string purposeOfVisit, Nullable<int> deposit, Nullable<int> roomRent)
        {
            var roomNoParameter = roomNo.HasValue ?
                new ObjectParameter("RoomNo", roomNo) :
                new ObjectParameter("RoomNo", typeof(int));
    
            var guestNameParameter = guestName != null ?
                new ObjectParameter("GuestName", guestName) :
                new ObjectParameter("GuestName", typeof(string));
    
            var checkinDateParameter = checkinDate != null ?
                new ObjectParameter("CheckinDate", checkinDate) :
                new ObjectParameter("CheckinDate", typeof(string));
    
            var purposeOfVisitParameter = purposeOfVisit != null ?
                new ObjectParameter("PurposeOfVisit", purposeOfVisit) :
                new ObjectParameter("PurposeOfVisit", typeof(string));
    
            var depositParameter = deposit.HasValue ?
                new ObjectParameter("Deposit", deposit) :
                new ObjectParameter("Deposit", typeof(int));
    
            var roomRentParameter = roomRent.HasValue ?
                new ObjectParameter("RoomRent", roomRent) :
                new ObjectParameter("RoomRent", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spInsertData", roomNoParameter, guestNameParameter, checkinDateParameter, purposeOfVisitParameter, depositParameter, roomRentParameter);
        }
    }
}
